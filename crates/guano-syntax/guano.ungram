SourceFile = (items: ModuleItem*)

Name = 'iden' | 'this'
Path = (segments: PathSegment*)
PathSegment = '::'? (segment: Name)

ListType = '[' Type ']'
NilableType = Type '?'

Type = ListType | NilableType | Path

Expr = Literal | BinaryExpr | Path |
    ContinueExpr | BreakExpr | ReturnExpr | 
    Block | 
    // ThisExpr | 
    GroupExpr | 
    IfExpr | LoopExpr | WhileExpr | 
    ForExpr | UnaryExpr | CallExpr | 
    IndexExpr | FieldExpr | CastExpr | 
    ListExpr | IsExpr

Literal =
    'lit_float' | 'lit_integer' | 'lit_string' | 
    'lit_char' | 'true' | 'false' | 
    'nil' | 'nan' | 'inf'

BinaryOp =  '||' | '&&' | '==' | '!=' | 
    '<=' | '>=' | '<' | '>' | 
    '+' | '*' | '-' | '/' | 
    '%' | '<<' | '>>' | '^' | 
    '|' | '&' | '=' | '+=' | 
    '/=' | '*=' | '%=' | '>>=' |
    '<<=' | '-=' | '|=' | '&=' | 
    '^=' | '&&=' | '||='

BinaryExpr = Expr (op: BinaryOp) Expr

UnaryOp = '-' | '!'

UnaryExpr = (op: UnaryOp) Expr

ContinueExpr = 'continue'
BreakExpr = 'break'
ReturnExpr = 'return' Expr?
GroupExpr = '(' Expr ')'

IfExpr = 'if' Expr Block ElseBlock?
ElseBlock = 'else' ( Block | IfExpr )

LoopExpr = 'loop' Block
WhileExpr = 'while' Expr Block
ForExpr = 'for' 'iden' 'in' Expr Block

IsExpr = Expr 'is' Type
CastExpr = Expr 'as' Type

CallExpr = Expr '(' (params: ListExprItem*) ')'

IndexExpr = Expr '[' Expr ']'
FieldExpr = Expr '.' 'iden'
ListExpr = '[' (values: ListExprItem*) ']'
ListExprItem = ','? Expr

Block = 
    '{' 
        Statement*
        Expr? 
    '}'

ExprStatement = Expr ';'?

EmptyStatement = ';'

Statement = ExprStatement | 
    EmptyStatement | 
    Var | 
    Import

Func = 'pub'? 'veto'? 'static'?
    'fun' 'iden' FuncParams?
    FuncType? FuncBody
FuncParams = '(' FuncParam* ')'
FuncParam = ','? 'iden' ':' Type
FuncType = '->' Type
FuncBody = Block | ';'

Class = 'pub'? 'class' 'iden' Path? (ClassBody | ';')

ClassField = 'pub'? 'iden' ':' Type ';'
ClassBody = '{' (fields: ClassField*) '}'

Proto = 'pub'? 'proto' 'iden' 
    ProtoExtends? ProtoBody
ProtoExtends = ':' 
    ProtoExtension
ProtoExtension = '+'? Path
ProtoBody = '{' Func* '}'

Var = 'pub'? 'static'? VarKind 
    'iden' VarType?
    VarValue? ';'
VarType = ':' Type
VarValue = '=' Expr
VarKind = 'var' | 'let'

Decl = Var | Class | Proto | Func | Import

Module = 'pub'? 'module' 
    'iden' ModuleBody
ModuleBody = '{' ModuleItem* '}'
ModuleItem = Decl | Impl

Impl = ImplProto | ImplType
ImplBody = '{' Func* '}'
ImplProto = 'impl' Path
    'on' Type ImplBody

ImplType = 'impl' Type ImplBody

ImportPath = Path? '::'? '*'?
ImportAlias = 'as' 'iden'
ImportItem = ImportPath ImportAlias? ','?
ImportItems = '{' ImportItem* '}'
ImportBody = ImportItem | ImportItems
ImportFrom = 'import' 
    ImportBody 'from' Path ';'
ImportBasic = 'import' ImportBody ';'
Import = ImportFrom | ImportBasic