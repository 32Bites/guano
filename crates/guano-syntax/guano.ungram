SourceFile = ModuleItem*

Name = 'iden' | 'this' // | 'init'
Path = PathSegment*
PathSegment = '::'? Name

ListType = '[' Type ']'
NilableType = Type '?'

Type = ListType | NilableType | Path

Expr = 
    Literal | BinaryExpr | Path |
    ContinueExpr | BreakExpr | ReturnExpr | 
    Block | GroupExpr | IfExpr | 
    LoopExpr | WhileExpr | ForExpr | 
    UnaryExpr | CallExpr | IndexExpr | 
    FieldExpr | CastExpr | ListExpr | IsExpr

Literal =
    'lit_float' | 'lit_integer' | 'lit_string' | 
    'lit_char' | 'true' | 'false' | 
    'nil' | 'nan' | 'inf'

BinaryOp =
    '||' | '&&' | '==' | '!=' | 
    '<=' | '>=' | '<' | '>' | 
    '+' | '*' | '-' | '/' | 
    '%' | '<<' | '>>' | '^' | 
    '|' | '&' | '=' | '+=' | 
    '/=' | '*=' | '%=' | '>>=' |
    '<<=' | '-=' | '|=' | '&=' | 
    '^=' | '&&=' | '||='

BinaryExpr = Expr BinaryOp Expr

UnaryOp = '-' | '!'

UnaryExpr = UnaryOp Expr

ContinueExpr = 'continue'
BreakExpr = 'break'
ReturnExpr = 'return' Expr?
GroupExpr = '(' Expr ')'

IfExpr = 
    'if' Expr 
    Block ElseBlock?
ElseBlock = 'else' ( Block | IfExpr )

LoopExpr = 'loop' Block
WhileExpr = 'while' Expr Block
ForExpr = 
    'for' 'iden' 
    'in' Expr Block

IsExpr = Expr 'is' Type
CastExpr = Expr 'as' Type

CallExpr = Expr '(' ListExprItem* ')'

IndexExpr = Expr '[' Expr ']'

FieldExpr = Expr '.' 'iden'

ListExpr = '[' ListExprItem* ']'
ListExprItem = ','? Expr

Block = '{' Statement* Expr? '}'


Statement = 
    ExprStatement | 
    EmptyStatement | 
    Var | Import
ExprStatement = Expr ';'?
EmptyStatement = ';'

Func = 
    'pub'? 'veto'? 'static'?
    'fun' 'iden' FuncParams?
    FuncType? FuncBody
FuncParams = '(' FuncParam* ')'
FuncParam = ','? 'iden' ':' Type
FuncType = '->' Type
FuncBody = Block | ';'

Class = 
    'pub'? 'class' 'iden' 
    ClassExtends? ClassBody
ClassExtends = ':' Path?
ClassBody = ClassBlock | ';'
ClassBlock = '{' ClassField* '}'
ClassField = 
    'pub'? 'iden' 
    ':' Type ';'

Proto =
    'pub'? 'proto' 'iden' 
    ProtoExtends? ProtoBody
ProtoExtends = ':' ProtoExtension*
ProtoExtension = '+'? Path
ProtoBody = '{' Func* '}'

Var =
    'pub'? 'static'? VarKind 
    'iden' VarType? VarValue? ';'
VarType = ':' Type
VarValue = '=' Expr
VarKind = 'var' | 'let'

Decl =
    Module | Var |
    Class | Proto | 
    Func | Import

Module = 
    'pub'? 'module' 
    'iden' ModuleBody
ModuleBody = '{' ModuleItem* '}'
ModuleItem = Decl | Impl

Impl = 'impl' ImplProto? Type ImplBody
ImplProto = Path 'on'
ImplBody = '{' Func* '}'

Import = 
    'import' Path
    ImportAlias? ';'
ImportAlias = 'as' 'iden'

//    ImportPath = Path? '::'? '*'?
//    ImportAlias = 'as' 'iden'
//    ImportItem = ImportPath ImportAlias? ','?
//    ImportItems = '{' ImportItem* '}'
//    ImportBody = ImportItem | ImportItems
//    ImportFrom = 'import' ImportBody 'from' Path ';'
//    ImportBasic = 'import' ImportBody ';'
//    Import = ImportFrom | ImportBasic